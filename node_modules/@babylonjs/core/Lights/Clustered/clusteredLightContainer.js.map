{"version":3,"file":"clusteredLightContainer.js","sourceRoot":"","sources":["../../../../../dev/core/src/Lights/Clustered/clusteredLightContainer.ts"],"names":[],"mappings":"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","sourcesContent":["import { StorageBuffer } from \"core/Buffers/storageBuffer\";\nimport { Constants } from \"core/Engines/constants\";\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\nimport type { WebGPUEngine } from \"core/Engines/webgpuEngine\";\nimport type { Effect } from \"core/Materials/effect\";\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\nimport { TmpColors } from \"core/Maths/math.color\";\nimport { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport { _WarnImport } from \"core/Misc/devTools\";\nimport { serialize } from \"core/Misc/decorators\";\nimport { Logger } from \"core/Misc/logger\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { Node } from \"core/node\";\nimport type { Scene } from \"core/scene\";\nimport type { Nullable } from \"core/types\";\n\nimport { Light } from \"../light\";\nimport { LightConstants } from \"../lightConstants\";\nimport type { PointLight } from \"../pointLight\";\nimport type { SpotLight } from \"../spotLight\";\n\nimport \"core/Meshes/thinInstanceMesh\";\n\nNode.AddNodeConstructor(\"Light_Type_5\", (name, scene) => {\n    return () => new ClusteredLightContainer(name, [], scene);\n});\n\n/**\n * A special light that renders all its associated spot or point lights using a clustered or forward+ system.\n */\nexport class ClusteredLightContainer extends Light {\n    private static _GetEngineBatchSize(engine: AbstractEngine): number {\n        const caps = engine._caps;\n        if (!caps.texelFetch) {\n            return 0;\n        } else if (engine.isWebGPU) {\n            // On WebGPU we use atomic writes to storage textures\n            return 32;\n        } else if (engine.version > 1) {\n            // On WebGL 2 we use additive float blending as the light mask\n            if (!caps.colorBufferFloat || !caps.blendFloat) {\n                return 0;\n            }\n            // Due to the use of floats we want to limit lights to the precision of floats\n            return caps.shaderFloatPrecision;\n        } else {\n            // WebGL 1 is not supported due to lack of dynamic for loops\n            return 0;\n        }\n    }\n\n    /**\n     * Checks if the clustered lighting system supports the given light with its current parameters.\n     * This will also check if the light's associated engine supports clustered lighting.\n     *\n     * @param light The light to test\n     * @returns true if the light and its engine is supported\n     */\n    public static IsLightSupported(light: Light): boolean {\n        if (ClusteredLightContainer._GetEngineBatchSize(light.getEngine()) === 0) {\n            return false;\n        } else if (light.shadowEnabled && light._scene.shadowsEnabled && light.getShadowGenerators()) {\n            // Shadows are not supported\n            return false;\n        } else if (light.falloffType !== Light.FALLOFF_DEFAULT) {\n            // Only the default falloff is supported\n            return false;\n        } else if (light.getTypeID() === LightConstants.LIGHTTYPEID_POINTLIGHT) {\n            return true;\n        } else if (light.getTypeID() === LightConstants.LIGHTTYPEID_SPOTLIGHT) {\n            // Extra texture bindings per light are not supported\n            return !(<SpotLight>light).projectionTexture && !(<SpotLight>light).iesProfileTexture;\n        } else {\n            // Currently only point and spot lights are supported\n            return false;\n        }\n    }\n\n    /** @internal */\n    public static _SceneComponentInitialization: (scene: Scene) => void = () => {\n        throw _WarnImport(\"ClusteredLightingSceneComponent\");\n    };\n\n    private readonly _batchSize: number;\n\n    /**\n     * True if clustered lighting is supported.\n     */\n    public get isSupported(): boolean {\n        return this._batchSize > 0;\n    }\n\n    private readonly _lights: (PointLight | SpotLight)[] = [];\n    /**\n     * Gets the current list of lights added to this clustering system.\n     */\n    public get lights(): readonly Light[] {\n        return this._lights;\n    }\n\n    private _lightDataBuffer: Float32Array;\n    private _lightDataTexture: RawTexture;\n\n    private _tileMaskBatches = -1;\n    private _tileMaskTexture: RenderTargetTexture;\n    private _tileMaskBuffer: Nullable<StorageBuffer>;\n\n    private _horizontalTiles = 64;\n    /**\n     * The number of tiles in the horizontal direction to cluster lights into.\n     * A lower value will reduce memory and make the clustering step faster, while a higher value increases memory and makes the rendering step faster.\n     */\n    @serialize()\n    public get horizontalTiles(): number {\n        return this._horizontalTiles;\n    }\n\n    public set horizontalTiles(horizontal: number) {\n        if (this._horizontalTiles === horizontal) {\n            return;\n        }\n        this._horizontalTiles = horizontal;\n        // Force the batch data to be recreated\n        this._tileMaskBatches = -1;\n    }\n\n    private _verticalTiles = 64;\n    /**\n     * The number of tiles in the vertical direction to cluster lights into.\n     * A lower value will reduce memory and make the clustering step faster, while a higher value increases memory and makes the rendering step faster.\n     */\n    @serialize()\n    public get verticalTiles(): number {\n        return this._verticalTiles;\n    }\n\n    public set verticalTiles(vertical: number) {\n        if (this._verticalTiles === vertical) {\n            return;\n        }\n        this._verticalTiles = vertical;\n        // Force the batch data to be recreated\n        this._tileMaskBatches = -1;\n    }\n\n    private readonly _proxyMaterial: ShaderMaterial;\n    private readonly _proxyMesh: Mesh;\n\n    private _maxRange = 16383;\n    private _minInverseSquaredRange = 1 / (this._maxRange * this._maxRange);\n    /**\n     * This limits the range of all the added lights, so even lights with extreme ranges will still have bounds for clustering.\n     */\n    @serialize()\n    public get maxRange(): number {\n        return this._maxRange;\n    }\n\n    public set maxRange(range: number) {\n        if (this._maxRange === range) {\n            return;\n        }\n        this._maxRange = range;\n        this._minInverseSquaredRange = 1 / (range * range);\n    }\n\n    /**\n     * Creates a new clustered light system with an initial set of lights.\n     *\n     * @param name The name of the clustered light container\n     * @param lights The initial set of lights to add\n     * @param scene The scene the clustered light container belongs to\n     */\n    constructor(name: string, lights: Light[] = [], scene?: Scene) {\n        super(name, scene);\n        const engine = this.getEngine();\n        this._batchSize = ClusteredLightContainer._GetEngineBatchSize(engine);\n\n        const proxyShader = { vertex: \"lightProxy\", fragment: \"lightProxy\" };\n        this._proxyMaterial = new ShaderMaterial(\"ProxyMaterial\", this._scene, proxyShader, {\n            attributes: [\"position\"],\n            uniforms: [\"view\", \"projection\", \"tileMaskResolution\"],\n            samplers: [\"lightDataTexture\"],\n            uniformBuffers: [\"Scene\"],\n            storageBuffers: [\"tileMaskBuffer\"],\n            defines: [`CLUSTLIGHT_BATCH ${this._batchSize}`],\n            shaderLanguage: engine.isWebGPU ? ShaderLanguage.WGSL : ShaderLanguage.GLSL,\n            extraInitializationsAsync: async () => {\n                if (engine.isWebGPU) {\n                    await Promise.all([import(\"../../ShadersWGSL/lightProxy.vertex\"), import(\"../../ShadersWGSL/lightProxy.fragment\")]);\n                } else {\n                    await Promise.all([import(\"../../Shaders/lightProxy.vertex\"), import(\"../../Shaders/lightProxy.fragment\")]);\n                }\n            },\n        });\n\n        // Additive blending is for merging masks on WebGL\n        this._proxyMaterial.transparencyMode = ShaderMaterial.MATERIAL_ALPHABLEND;\n        this._proxyMaterial.alphaMode = Constants.ALPHA_ADD;\n\n        this._proxyMesh = CreatePlane(\"ProxyMesh\", { size: 2 });\n        // Make sure it doesn't render for the default scene\n        this._scene.removeMesh(this._proxyMesh);\n        this._proxyMesh.material = this._proxyMaterial;\n\n        this._updateBatches();\n\n        if (this._batchSize > 0) {\n            ClusteredLightContainer._SceneComponentInitialization(this._scene);\n            for (const light of lights) {\n                this.addLight(light);\n            }\n        }\n    }\n\n    public override getClassName(): string {\n        return \"ClusteredLightContainer\";\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public override getTypeID(): number {\n        return LightConstants.LIGHTTYPEID_CLUSTERED_CONTAINER;\n    }\n\n    /** @internal */\n    public _updateBatches(): RenderTargetTexture {\n        this._proxyMesh.isVisible = this._lights.length > 0;\n\n        // Ensure space for atleast 1 batch\n        const batches = Math.max(Math.ceil(this._lights.length / this._batchSize), 1);\n        if (this._tileMaskBatches >= batches) {\n            this._proxyMesh.thinInstanceCount = this._lights.length;\n            return this._tileMaskTexture;\n        }\n        const engine = this.getEngine();\n        // Round up to a batch size so we don't have to reallocate as often\n        const maxLights = batches * this._batchSize;\n\n        this._lightDataBuffer = new Float32Array(20 * maxLights);\n        this._lightDataTexture?.dispose();\n        this._lightDataTexture = new RawTexture(\n            this._lightDataBuffer,\n            5,\n            maxLights,\n            Constants.TEXTUREFORMAT_RGBA,\n            this._scene,\n            false,\n            false,\n            Constants.TEXTURE_NEAREST_SAMPLINGMODE,\n            Constants.TEXTURETYPE_FLOAT\n        );\n        this._proxyMaterial.setTexture(\"lightDataTexture\", this._lightDataTexture);\n\n        this._tileMaskTexture?.dispose();\n        const textureSize = { width: this._horizontalTiles, height: this._verticalTiles };\n        if (!engine.isWebGPU) {\n            // In WebGL we shift the light proxy by the batch number\n            textureSize.height *= batches;\n        }\n        this._tileMaskTexture = new RenderTargetTexture(\"TileMaskTexture\", textureSize, this._scene, {\n            // We don't write anything on WebGPU so make it as small as possible\n            type: engine.isWebGPU ? Constants.TEXTURETYPE_UNSIGNED_BYTE : Constants.TEXTURETYPE_FLOAT,\n            format: Constants.TEXTUREFORMAT_RED,\n            generateDepthBuffer: false,\n        });\n\n        this._tileMaskTexture.renderParticles = false;\n        this._tileMaskTexture.renderSprites = false;\n        this._tileMaskTexture.noPrePassRenderer = true;\n        this._tileMaskTexture.renderList = [this._proxyMesh];\n\n        this._tileMaskTexture.onBeforeBindObservable.add(() => {\n            this._updateLightData();\n        });\n\n        this._tileMaskTexture.onClearObservable.add(() => {\n            if (engine.isWebGPU) {\n                // Clear the storage buffer for WebGPU\n                this._tileMaskBuffer?.clear();\n            } else {\n                // Only clear the texture on WebGL\n                engine.clear({ r: 0, g: 0, b: 0, a: 1 }, true, false);\n            }\n        });\n\n        if (engine.isWebGPU) {\n            // WebGPU also needs a storage buffer to write to\n            this._tileMaskBuffer?.dispose();\n            const bufferSize = this._horizontalTiles * this._verticalTiles * batches * 4;\n            this._tileMaskBuffer = new StorageBuffer(<WebGPUEngine>engine, bufferSize);\n            this._proxyMaterial.setStorageBuffer(\"tileMaskBuffer\", this._tileMaskBuffer);\n        }\n\n        this._proxyMaterial.setVector3(\"tileMaskResolution\", new Vector3(this._horizontalTiles, this.verticalTiles, batches));\n\n        // We don't actually use the matrix data but we need enough capacity for the lights\n        this._proxyMesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(maxLights * 16));\n        this._proxyMesh.thinInstanceCount = this._lights.length;\n        this._tileMaskBatches = batches;\n        return this._tileMaskTexture;\n    }\n\n    private _updateLightData(): void {\n        const buf = this._lightDataBuffer;\n        for (let i = 0; i < this._lights.length; i += 1) {\n            const light = this._lights[i];\n            const off = i * 20;\n            const computed = light.computeTransformedInformation();\n            const scaledIntensity = light.getScaledIntensity();\n\n            const position = computed ? light.transformedPosition : light.position;\n            const diffuse = light.diffuse.scaleToRef(scaledIntensity, TmpColors.Color3[0]);\n            const specular = light.specular.scaleToRef(scaledIntensity, TmpColors.Color3[1]);\n            const range = Math.min(light.range, this.maxRange);\n            const inverseSquaredRange = Math.max(light._inverseSquaredRange, this._minInverseSquaredRange);\n\n            // vLightData\n            buf[off + 0] = position.x;\n            buf[off + 1] = position.y;\n            buf[off + 2] = position.z;\n            buf[off + 3] = 0;\n            // vLightDiffuse\n            buf[off + 4] = diffuse.r;\n            buf[off + 5] = diffuse.g;\n            buf[off + 6] = diffuse.b;\n            buf[off + 7] = range;\n            // vLightSpecular\n            buf[off + 8] = specular.r;\n            buf[off + 9] = specular.g;\n            buf[off + 10] = specular.b;\n            buf[off + 11] = light.radius;\n            // vLightDirection\n            buf[off + 12] = 0;\n            buf[off + 13] = 0;\n            buf[off + 14] = 0;\n            buf[off + 15] = -1;\n            // vLightFalloff\n            buf[off + 16] = range;\n            buf[off + 17] = inverseSquaredRange;\n            buf[off + 18] = 0;\n            buf[off + 19] = 0;\n\n            if (light.getTypeID() === LightConstants.LIGHTTYPEID_SPOTLIGHT) {\n                const spotLight = <SpotLight>light;\n                const direction = Vector3.NormalizeToRef(computed ? spotLight.transformedDirection : spotLight.direction, TmpVectors.Vector3[0]);\n\n                // vLightData.a\n                buf[off + 3] = spotLight.exponent;\n                // vLightDirection\n                buf[off + 12] = direction.x;\n                buf[off + 13] = direction.y;\n                buf[off + 14] = direction.z;\n                buf[off + 15] = spotLight._cosHalfAngle;\n                // vLightFalloff.zw\n                buf[off + 18] = spotLight._lightAngleScale;\n                buf[off + 19] = spotLight._lightAngleOffset;\n            }\n        }\n        this._lightDataTexture.update(this._lightDataBuffer);\n    }\n\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures?: boolean): void {\n        for (const light of this._lights) {\n            light.dispose(doNotRecurse, disposeMaterialAndTextures);\n        }\n        this._lightDataTexture.dispose();\n        this._tileMaskTexture.dispose();\n        this._tileMaskBuffer?.dispose();\n        this._proxyMesh.dispose(doNotRecurse, disposeMaterialAndTextures);\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n\n    /**\n     * Adds a light to the clustering system.\n     * @param light The light to add\n     */\n    public addLight(light: Light): void {\n        if (!ClusteredLightContainer.IsLightSupported(light)) {\n            Logger.Warn(\"Attempting to add a light to cluster that does not support clustering\");\n            return;\n        }\n        this._scene.removeLight(light);\n        this._lights.push(<PointLight | SpotLight>light);\n\n        this._proxyMesh.isVisible = true;\n        this._proxyMesh.thinInstanceCount = this._lights.length;\n    }\n\n    /**\n     * Removes a light from the clustering system.\n     * @param light The light to remove\n     * @returns the index where the light was in the light list\n     */\n    public removeLight(light: Light): number {\n        const index = this.lights.indexOf(light);\n        if (index === -1) {\n            return index;\n        }\n        this._lights.splice(index, 1);\n        this._scene.addLight(light);\n\n        this._proxyMesh.thinInstanceCount = this._lights.length;\n        if (this._lights.length === 0) {\n            this._proxyMesh.isVisible = false;\n        }\n        return index;\n    }\n\n    protected override _buildUniformLayout(): void {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"vNumLights\", 1);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n\n    public override transferToEffect(effect: Effect, lightIndex: string): Light {\n        const engine = this.getEngine();\n        const hscale = this._horizontalTiles / engine.getRenderWidth();\n        const vscale = this._verticalTiles / engine.getRenderHeight();\n        this._uniformBuffer.updateFloat4(\"vLightData\", hscale, vscale, this._verticalTiles, this._tileMaskBatches, lightIndex);\n        this._uniformBuffer.updateFloat(\"vNumLights\", this._lights.length, lightIndex);\n        return this;\n    }\n\n    public override transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\n        const engine = this.getEngine();\n        effect.setTexture(\"lightDataTexture\" + lightIndex, this._lightDataTexture);\n        if (engine.isWebGPU) {\n            (<WebGPUEngine>engine).setStorageBuffer(\"tileMaskBuffer\" + lightIndex, this._tileMaskBuffer);\n        } else {\n            effect.setTexture(\"tileMaskTexture\" + lightIndex, this._tileMaskTexture);\n        }\n        return this;\n    }\n\n    public override transferToNodeMaterialEffect(): Light {\n        // TODO: ????\n        return this;\n    }\n\n    public override prepareLightSpecificDefines(defines: any, lightIndex: number): void {\n        defines[\"CLUSTLIGHT\" + lightIndex] = true;\n        defines[\"CLUSTLIGHT_BATCH\"] = this._batchSize;\n    }\n\n    public override _isReady(): boolean {\n        this._updateBatches();\n        return this._proxyMesh.isReady(true, true);\n    }\n}\n\n// Register Class Name\nRegisterClass(\"BABYLON.ClusteredLightContainer\", ClusteredLightContainer);\n"]}